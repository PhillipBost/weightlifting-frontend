// app/components/ThemeProvider.tsx
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'dark' | 'light' | 'high-contrast';

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  cycleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

interface ThemeProviderProps {
  children: React.ReactNode;
}

export function ThemeProvider({ children }: ThemeProviderProps) {
  const [theme, setThemeState] = useState<Theme>('dark');
  const [mounted, setMounted] = useState(false);

  // Handle hydration
  useEffect(() => {
    setMounted(true);
    
    // Get theme from localStorage or default to 'dark'
    const savedTheme = localStorage.getItem('weightlifting-theme') as Theme;
    if (savedTheme && ['dark', 'light', 'high-contrast'].includes(savedTheme)) {
      setThemeState(savedTheme);
    } else {
      // Check system preference as fallback
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setThemeState(prefersDark ? 'dark' : 'light');
    }
  }, []);

  // Update theme
  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
    localStorage.setItem('weightlifting-theme', newTheme);
    document.documentElement.setAttribute('data-theme', newTheme);
  };

  // Cycle through themes (for theme switcher button)
  const cycleTheme = () => {
    const themes: Theme[] = ['dark', 'light', 'high-contrast'];
    const currentIndex = themes.indexOf(theme);
    const nextIndex = (currentIndex + 1) % themes.length;
    setTheme(themes[nextIndex]);
  };

  // Apply theme to document
  useEffect(() => {
    if (mounted) {
      document.documentElement.setAttribute('data-theme', theme);
    }
  }, [theme, mounted]);

  // Prevent hydration mismatch
  if (!mounted) {
    return null;
  }

  return (
    <ThemeContext.Provider value={{ theme, setTheme, cycleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

// app/components/ThemeSwitcher.tsx
'use client';

import React from 'react';
import { Moon, Sun, Contrast } from 'lucide-react';
import { useTheme } from './ThemeProvider';

export function ThemeSwitcher() {
  const { theme, setTheme } = useTheme();

  const themes = [
    { 
      id: 'dark' as const, 
      label: 'Dark', 
      icon: Moon,
      description: 'Comfortable dark theme'
    },
    { 
      id: 'light' as const, 
      label: 'Light', 
      icon: Sun,
      description: 'Clean light theme'
    },
    { 
      id: 'high-contrast' as const, 
      label: 'High Contrast', 
      icon: Contrast,
      description: 'Maximum accessibility'
    }
  ];

  return (
    <div className="flex items-center space-x-1 bg-app-tertiary rounded-lg p-1">
      {themes.map(({ id, label, icon: Icon, description }) => (
        <button
          key={id}
          onClick={() => setTheme(id)}
          className={`
            flex items-center space-x-2 px-3 py-2 rounded-md text-xs font-medium transition-all
            ${theme === id 
              ? 'bg-accent-primary text-app-primary shadow-sm' 
              : 'text-app-secondary hover:text-app-primary hover:bg-app-surface'
            }
          `}
          title={description}
        >
          <Icon className="h-3 w-3" />
          <span className="hidden sm:inline">{label}</span>
        </button>
      ))}
    </div>
  );
}

// app/components/QuickThemeToggle.tsx (Alternative: Single button that cycles)
'use client';

import React from 'react';
import { Moon, Sun, Contrast } from 'lucide-react';
import { useTheme } from './ThemeProvider';

export function QuickThemeToggle() {
  const { theme, cycleTheme } = useTheme();

  const getIcon = () => {
    switch (theme) {
      case 'light': return Sun;
      case 'high-contrast': return Contrast;
      default: return Moon;
    }
  };

  const getLabel = () => {
    switch (theme) {
      case 'light': return 'Light theme';
      case 'high-contrast': return 'High contrast theme';
      default: return 'Dark theme';
    }
  };

  const Icon = getIcon();

  return (
    <button
      onClick={cycleTheme}
      className="
        flex items-center space-x-2 px-3 py-2 rounded-lg text-sm
        bg-app-tertiary hover:bg-app-surface 
        text-app-secondary hover:text-app-primary
        transition-all border border-app-secondary
      "
      title={`Current: ${getLabel()}. Click to switch theme.`}
    >
      <Icon className="h-4 w-4" />
      <span className="hidden sm:inline">Theme</span>
    </button>
  );
}